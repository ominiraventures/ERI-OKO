/*
 * Copyright(c) 2009 - 2019 Abelium d.o.o.
 * Kajuhova 90, 1000 Ljubljana, Slovenia
 * All rights reserved
 * Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH
 * Riesaer Str. 5, 01129 Dresden
 * All rights reserved.
 *
 * INATrace Services API
 * INATrace Services API OpenAPI documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the openapi-typescript-angular-generator.
 * https://github.com/alenabelium/openapi-typescript-angular-generator
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { ValidatorFn, Validators } from '@angular/forms';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';
import { catchError }                                        from 'rxjs/operators';

import { ApiAdminUserUpdate } from '../model/apiAdminUserUpdate';
import { ApiCreateUserRequest } from '../model/apiCreateUserRequest';
import { ApiDefaultResponse } from '../model/apiDefaultResponse';
import { ApiEmail } from '../model/apiEmail';
import { ApiLoginRequest } from '../model/apiLoginRequest';
import { ApiPaginatedResponseApiUserBase } from '../model/apiPaginatedResponseApiUserBase';
import { ApiResetPasswordRequest } from '../model/apiResetPasswordRequest';
import { ApiResponseApiUser } from '../model/apiResponseApiUser';
import { ApiResponseApiUserGet } from '../model/apiResponseApiUserGet';
import { ApiToken } from '../model/apiToken';
import { ApiUserRole } from '../model/apiUserRole';
import { ApiUserUpdate } from '../model/apiUserUpdate';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/**
 * Namespace for activateUser.
 */
export namespace ActivateUser {
    /**
     * Parameter map for activateUser.
     */
    export interface PartialParamMap {
      action: 'VIEW_USER_PROFILE' | 'CREATE_COMPANY' | 'UPDATE_USER_PROFILE' | 'ACTIVATE_USER' | 'CONFIRM_USER_EMAIL' | 'DEACTIVATE_USER' | 'SET_USER_SYSTEM_ADMIN' | 'UNSET_USER_SYSTEM_ADMIN' | 'SET_USER_REGIONAL_ADMIN' | 'UNSET_USER_REGIONAL_ADMIN';
      ApiUserRole: ApiUserRole;
    }

    /**
     * Enumeration of all parameters for activateUser.
     */
    export enum Parameters {
      action = 'action',
      ApiUserRole = 'ApiUserRole'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of activateUser
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ActivateUser.PartialParamMap]?: [string, ValidatorFn][]} = {
      action: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for adminListUsers.
 */
export namespace AdminListUsers {
    /**
     * Parameter map for adminListUsers.
     */
    export interface PartialParamMap {
      /**
       * Status
       */
      status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED';
      /**
       * User role
       */
      role?: 'USER' | 'SYSTEM_ADMIN' | 'REGIONAL_ADMIN';
      /**
       * Email
       */
      email?: string;
      /**
       * Surname
       */
      surname?: string;
      /**
       * Name, surname or email
       */
      query?: string;
      /**
       * Only count, only fetch, or return both values (if null)
       */
      requestType?: 'COUNT' | 'FETCH';
      /**
       * Number of records to return. Min: 1, default: 100
       */
      limit?: number;
      /**
       * Number of records to skip before returning. Default: 0, min: 0
       */
      offset?: number;
      /**
       * Column name to be sorted by, varies for each endpoint, default is id
       */
      sortBy?: string;
      /**
       * Direction of sorting (ASC or DESC). Default DESC.
       */
      sort?: 'ASC' | 'DESC';
    }

    /**
     * Enumeration of all parameters for adminListUsers.
     */
    export enum Parameters {
      /**
       * Status
       */
      status = 'status',
      /**
       * User role
       */
      role = 'role',
      /**
       * Email
       */
      email = 'email',
      /**
       * Surname
       */
      surname = 'surname',
      /**
       * Name, surname or email
       */
      query = 'query',
      /**
       * Only count, only fetch, or return both values (if null)
       */
      requestType = 'requestType',
      /**
       * Number of records to return. Min: 1, default: 100
       */
      limit = 'limit',
      /**
       * Number of records to skip before returning. Default: 0, min: 0
       */
      offset = 'offset',
      /**
       * Column name to be sorted by, varies for each endpoint, default is id
       */
      sortBy = 'sortBy',
      /**
       * Direction of sorting (ASC or DESC). Default DESC.
       */
      sort = 'sort'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of adminListUsers
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof AdminListUsers.PartialParamMap]?: [string, ValidatorFn][]} = {
      status: [
      ],
      role: [
      ],
      email: [
      ],
      surname: [
      ],
      query: [
      ],
      requestType: [
      ],
      limit: [
              ['min', Validators.min(1)],
      ],
      offset: [
              ['min', Validators.min(0)],
      ],
      sortBy: [
      ],
      sort: [
      ],
    };
}

/**
 * Namespace for adminUpdateProfile.
 */
export namespace AdminUpdateProfile {
    /**
     * Parameter map for adminUpdateProfile.
     */
    export interface PartialParamMap {
      ApiAdminUserUpdate: ApiAdminUserUpdate;
    }

    /**
     * Enumeration of all parameters for adminUpdateProfile.
     */
    export enum Parameters {
      ApiAdminUserUpdate = 'ApiAdminUserUpdate'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of adminUpdateProfile
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof AdminUpdateProfile.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for confirmEmail.
 */
export namespace ConfirmEmail {
    /**
     * Parameter map for confirmEmail.
     */
    export interface PartialParamMap {
      ApiToken: ApiToken;
    }

    /**
     * Enumeration of all parameters for confirmEmail.
     */
    export enum Parameters {
      ApiToken = 'ApiToken'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of confirmEmail
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ConfirmEmail.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for createUser.
 */
export namespace CreateUser {
    /**
     * Parameter map for createUser.
     */
    export interface PartialParamMap {
      ApiCreateUserRequest: ApiCreateUserRequest;
    }

    /**
     * Enumeration of all parameters for createUser.
     */
    export enum Parameters {
      ApiCreateUserRequest = 'ApiCreateUserRequest'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of createUser
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof CreateUser.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for getProfileForAdmin.
 */
export namespace GetProfileForAdmin {
    /**
     * Parameter map for getProfileForAdmin.
     */
    export interface PartialParamMap {
      id: number;
    }

    /**
     * Enumeration of all parameters for getProfileForAdmin.
     */
    export enum Parameters {
      id = 'id'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getProfileForAdmin
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetProfileForAdmin.PartialParamMap]?: [string, ValidatorFn][]} = {
      id: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getProfileForUser.
 */
export namespace GetProfileForUser {
    /**
     * Parameter map for getProfileForUser.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for getProfileForUser.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getProfileForUser
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetProfileForUser.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for listUsers.
 */
export namespace ListUsers {
    /**
     * Parameter map for listUsers.
     */
    export interface PartialParamMap {
      /**
       * Status
       */
      status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED';
      /**
       * User role
       */
      role?: 'USER' | 'SYSTEM_ADMIN' | 'REGIONAL_ADMIN';
      /**
       * Email
       */
      email?: string;
      /**
       * Surname
       */
      surname?: string;
      /**
       * Name, surname or email
       */
      query?: string;
      /**
       * Only count, only fetch, or return both values (if null)
       */
      requestType?: 'COUNT' | 'FETCH';
      /**
       * Number of records to return. Min: 1, default: 100
       */
      limit?: number;
      /**
       * Number of records to skip before returning. Default: 0, min: 0
       */
      offset?: number;
      /**
       * Column name to be sorted by, varies for each endpoint, default is id
       */
      sortBy?: string;
      /**
       * Direction of sorting (ASC or DESC). Default DESC.
       */
      sort?: 'ASC' | 'DESC';
    }

    /**
     * Enumeration of all parameters for listUsers.
     */
    export enum Parameters {
      /**
       * Status
       */
      status = 'status',
      /**
       * User role
       */
      role = 'role',
      /**
       * Email
       */
      email = 'email',
      /**
       * Surname
       */
      surname = 'surname',
      /**
       * Name, surname or email
       */
      query = 'query',
      /**
       * Only count, only fetch, or return both values (if null)
       */
      requestType = 'requestType',
      /**
       * Number of records to return. Min: 1, default: 100
       */
      limit = 'limit',
      /**
       * Number of records to skip before returning. Default: 0, min: 0
       */
      offset = 'offset',
      /**
       * Column name to be sorted by, varies for each endpoint, default is id
       */
      sortBy = 'sortBy',
      /**
       * Direction of sorting (ASC or DESC). Default DESC.
       */
      sort = 'sort'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listUsers
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListUsers.PartialParamMap]?: [string, ValidatorFn][]} = {
      status: [
      ],
      role: [
      ],
      email: [
      ],
      surname: [
      ],
      query: [
      ],
      requestType: [
      ],
      limit: [
              ['min', Validators.min(1)],
      ],
      offset: [
              ['min', Validators.min(0)],
      ],
      sortBy: [
      ],
      sort: [
      ],
    };
}

/**
 * Namespace for login.
 */
export namespace Login {
    /**
     * Parameter map for login.
     */
    export interface PartialParamMap {
      ApiLoginRequest: ApiLoginRequest;
    }

    /**
     * Enumeration of all parameters for login.
     */
    export enum Parameters {
      ApiLoginRequest = 'ApiLoginRequest'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of login
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof Login.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for logout.
 */
export namespace Logout {
    /**
     * Parameter map for logout.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for logout.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of logout
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof Logout.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for refreshAuthentication.
 */
export namespace RefreshAuthentication {
    /**
     * Parameter map for refreshAuthentication.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for refreshAuthentication.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of refreshAuthentication
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RefreshAuthentication.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for regionalAdminListUsers.
 */
export namespace RegionalAdminListUsers {
    /**
     * Parameter map for regionalAdminListUsers.
     */
    export interface PartialParamMap {
      /**
       * Status
       */
      status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED';
      /**
       * User role
       */
      role?: 'USER' | 'SYSTEM_ADMIN' | 'REGIONAL_ADMIN';
      /**
       * Email
       */
      email?: string;
      /**
       * Surname
       */
      surname?: string;
      /**
       * Name, surname or email
       */
      query?: string;
      /**
       * Only count, only fetch, or return both values (if null)
       */
      requestType?: 'COUNT' | 'FETCH';
      /**
       * Number of records to return. Min: 1, default: 100
       */
      limit?: number;
      /**
       * Number of records to skip before returning. Default: 0, min: 0
       */
      offset?: number;
      /**
       * Column name to be sorted by, varies for each endpoint, default is id
       */
      sortBy?: string;
      /**
       * Direction of sorting (ASC or DESC). Default DESC.
       */
      sort?: 'ASC' | 'DESC';
    }

    /**
     * Enumeration of all parameters for regionalAdminListUsers.
     */
    export enum Parameters {
      /**
       * Status
       */
      status = 'status',
      /**
       * User role
       */
      role = 'role',
      /**
       * Email
       */
      email = 'email',
      /**
       * Surname
       */
      surname = 'surname',
      /**
       * Name, surname or email
       */
      query = 'query',
      /**
       * Only count, only fetch, or return both values (if null)
       */
      requestType = 'requestType',
      /**
       * Number of records to return. Min: 1, default: 100
       */
      limit = 'limit',
      /**
       * Number of records to skip before returning. Default: 0, min: 0
       */
      offset = 'offset',
      /**
       * Column name to be sorted by, varies for each endpoint, default is id
       */
      sortBy = 'sortBy',
      /**
       * Direction of sorting (ASC or DESC). Default DESC.
       */
      sort = 'sort'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of regionalAdminListUsers
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RegionalAdminListUsers.PartialParamMap]?: [string, ValidatorFn][]} = {
      status: [
      ],
      role: [
      ],
      email: [
      ],
      surname: [
      ],
      query: [
      ],
      requestType: [
      ],
      limit: [
              ['min', Validators.min(1)],
      ],
      offset: [
              ['min', Validators.min(0)],
      ],
      sortBy: [
      ],
      sort: [
      ],
    };
}

/**
 * Namespace for requestResetPassword.
 */
export namespace RequestResetPassword {
    /**
     * Parameter map for requestResetPassword.
     */
    export interface PartialParamMap {
      ApiEmail: ApiEmail;
    }

    /**
     * Enumeration of all parameters for requestResetPassword.
     */
    export enum Parameters {
      ApiEmail = 'ApiEmail'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of requestResetPassword
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RequestResetPassword.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for resetPassword.
 */
export namespace ResetPassword {
    /**
     * Parameter map for resetPassword.
     */
    export interface PartialParamMap {
      ApiResetPasswordRequest: ApiResetPasswordRequest;
    }

    /**
     * Enumeration of all parameters for resetPassword.
     */
    export enum Parameters {
      ApiResetPasswordRequest = 'ApiResetPasswordRequest'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of resetPassword
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ResetPassword.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for updateProfile.
 */
export namespace UpdateProfile {
    /**
     * Parameter map for updateProfile.
     */
    export interface PartialParamMap {
      ApiUserUpdate: ApiUserUpdate;
    }

    /**
     * Enumeration of all parameters for updateProfile.
     */
    export enum Parameters {
      ApiUserUpdate = 'ApiUserUpdate'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of updateProfile
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof UpdateProfile.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}



@Injectable({
  providedIn: 'root'
})
export class UserControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath != null ? configuration.basePath : (basePath != null ? basePath : this.basePath);
        } else {
            this.configuration.basePath = basePath != null ? basePath : this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



  /**
   * Execute user (status, role) action. Must be a System admin or Regional admin (Regional admin has limited actions available) by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public activateUserByMap(
    map: ActivateUser.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public activateUserByMap(
    map: ActivateUser.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public activateUserByMap(
    map: ActivateUser.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public activateUserByMap(
    map: ActivateUser.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.activateUser(
      map.action,
      map.ApiUserRole,
      observe,
      reportProgress
    );
  }


    /**
     * Execute user (status, role) action. Must be a System admin or Regional admin (Regional admin has limited actions available)
     * 
     * @param action 
     * @param ApiUserRole 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public activateUser(action: 'VIEW_USER_PROFILE' | 'CREATE_COMPANY' | 'UPDATE_USER_PROFILE' | 'ACTIVATE_USER' | 'CONFIRM_USER_EMAIL' | 'DEACTIVATE_USER' | 'SET_USER_SYSTEM_ADMIN' | 'UNSET_USER_SYSTEM_ADMIN' | 'SET_USER_REGIONAL_ADMIN' | 'UNSET_USER_REGIONAL_ADMIN', ApiUserRole: ApiUserRole, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public activateUser(action: 'VIEW_USER_PROFILE' | 'CREATE_COMPANY' | 'UPDATE_USER_PROFILE' | 'ACTIVATE_USER' | 'CONFIRM_USER_EMAIL' | 'DEACTIVATE_USER' | 'SET_USER_SYSTEM_ADMIN' | 'UNSET_USER_SYSTEM_ADMIN' | 'SET_USER_REGIONAL_ADMIN' | 'UNSET_USER_REGIONAL_ADMIN', ApiUserRole: ApiUserRole, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public activateUser(action: 'VIEW_USER_PROFILE' | 'CREATE_COMPANY' | 'UPDATE_USER_PROFILE' | 'ACTIVATE_USER' | 'CONFIRM_USER_EMAIL' | 'DEACTIVATE_USER' | 'SET_USER_SYSTEM_ADMIN' | 'UNSET_USER_SYSTEM_ADMIN' | 'SET_USER_REGIONAL_ADMIN' | 'UNSET_USER_REGIONAL_ADMIN', ApiUserRole: ApiUserRole, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public activateUser(action: 'VIEW_USER_PROFILE' | 'CREATE_COMPANY' | 'UPDATE_USER_PROFILE' | 'ACTIVATE_USER' | 'CONFIRM_USER_EMAIL' | 'DEACTIVATE_USER' | 'SET_USER_SYSTEM_ADMIN' | 'UNSET_USER_SYSTEM_ADMIN' | 'SET_USER_REGIONAL_ADMIN' | 'UNSET_USER_REGIONAL_ADMIN', ApiUserRole: ApiUserRole, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (action === null || action === undefined) {
            throw new Error('Required parameter action was null or undefined when calling activateUser.');
        }
        if (ApiUserRole === null || ApiUserRole === undefined) {
            throw new Error('Required parameter ApiUserRole was null or undefined when calling activateUser.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/admin/execute/${encodeURIComponent(String(action))}`,
            ApiUserRole,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'activateUser')));
        }
        return handle;
    }


  /**
   * Lists all users. Must be an administrator. Sorting: email, surname or default by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public adminListUsersByMap(
    map: AdminListUsers.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiPaginatedResponseApiUserBase>;
  public adminListUsersByMap(
    map: AdminListUsers.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiPaginatedResponseApiUserBase>>;
  public adminListUsersByMap(
    map: AdminListUsers.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiPaginatedResponseApiUserBase>>;
  public adminListUsersByMap(
    map: AdminListUsers.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.adminListUsers(
      map.status,
      map.role,
      map.email,
      map.surname,
      map.query,
      map.requestType,
      map.limit,
      map.offset,
      map.sortBy,
      map.sort,
      observe,
      reportProgress
    );
  }


    /**
     * Lists all users. Must be an administrator. Sorting: email, surname or default
     * 
     * @param status Status
     * @param role User role
     * @param email Email
     * @param surname Surname
     * @param query Name, surname or email
     * @param requestType Only count, only fetch, or return both values (if null)
     * @param limit Number of records to return. Min: 1, default: 100
     * @param offset Number of records to skip before returning. Default: 0, min: 0
     * @param sortBy Column name to be sorted by, varies for each endpoint, default is id
     * @param sort Direction of sorting (ASC or DESC). Default DESC.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminListUsers(status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN' | 'REGIONAL_ADMIN', email?: string, surname?: string, query?: string, requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiPaginatedResponseApiUserBase>;
    public adminListUsers(status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN' | 'REGIONAL_ADMIN', email?: string, surname?: string, query?: string, requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiPaginatedResponseApiUserBase>>;
    public adminListUsers(status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN' | 'REGIONAL_ADMIN', email?: string, surname?: string, query?: string, requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiPaginatedResponseApiUserBase>>;
    public adminListUsers(status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN' | 'REGIONAL_ADMIN', email?: string, surname?: string, query?: string, requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', <any>role);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (surname !== undefined && surname !== null) {
            queryParameters = queryParameters.set('surname', <any>surname);
        }
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }
        if (requestType !== undefined && requestType !== null) {
            queryParameters = queryParameters.set('requestType', <any>requestType);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiPaginatedResponseApiUserBase>(`${this.configuration.basePath}/api/user/admin/list`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'adminListUsers')));
        }
        return handle;
    }


  /**
   * Update profile of a user. Must be admin by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public adminUpdateProfileByMap(
    map: AdminUpdateProfile.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public adminUpdateProfileByMap(
    map: AdminUpdateProfile.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public adminUpdateProfileByMap(
    map: AdminUpdateProfile.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public adminUpdateProfileByMap(
    map: AdminUpdateProfile.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.adminUpdateProfile(
      map.ApiAdminUserUpdate,
      observe,
      reportProgress
    );
  }


    /**
     * Update profile of a user. Must be admin
     * 
     * @param ApiAdminUserUpdate 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminUpdateProfile(ApiAdminUserUpdate: ApiAdminUserUpdate, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public adminUpdateProfile(ApiAdminUserUpdate: ApiAdminUserUpdate, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public adminUpdateProfile(ApiAdminUserUpdate: ApiAdminUserUpdate, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public adminUpdateProfile(ApiAdminUserUpdate: ApiAdminUserUpdate, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ApiAdminUserUpdate === null || ApiAdminUserUpdate === undefined) {
            throw new Error('Required parameter ApiAdminUserUpdate was null or undefined when calling adminUpdateProfile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.put<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/admin/profile`,
            ApiAdminUserUpdate,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'adminUpdateProfile')));
        }
        return handle;
    }


  /**
   * Confirms email with a token and logs-in the user by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public confirmEmailByMap(
    map: ConfirmEmail.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public confirmEmailByMap(
    map: ConfirmEmail.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public confirmEmailByMap(
    map: ConfirmEmail.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public confirmEmailByMap(
    map: ConfirmEmail.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.confirmEmail(
      map.ApiToken,
      observe,
      reportProgress
    );
  }


    /**
     * Confirms email with a token and logs-in the user
     * 
     * @param ApiToken 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public confirmEmail(ApiToken: ApiToken, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public confirmEmail(ApiToken: ApiToken, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public confirmEmail(ApiToken: ApiToken, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public confirmEmail(ApiToken: ApiToken, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ApiToken === null || ApiToken === undefined) {
            throw new Error('Required parameter ApiToken was null or undefined when calling confirmEmail.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/confirm_email`,
            ApiToken,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'confirmEmail')));
        }
        return handle;
    }


  /**
   * Create a new user (not activated) by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createUserByMap(
    map: CreateUser.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public createUserByMap(
    map: CreateUser.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public createUserByMap(
    map: CreateUser.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public createUserByMap(
    map: CreateUser.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.createUser(
      map.ApiCreateUserRequest,
      observe,
      reportProgress
    );
  }


    /**
     * Create a new user (not activated)
     * 
     * @param ApiCreateUserRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createUser(ApiCreateUserRequest: ApiCreateUserRequest, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public createUser(ApiCreateUserRequest: ApiCreateUserRequest, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public createUser(ApiCreateUserRequest: ApiCreateUserRequest, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public createUser(ApiCreateUserRequest: ApiCreateUserRequest, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ApiCreateUserRequest === null || ApiCreateUserRequest === undefined) {
            throw new Error('Required parameter ApiCreateUserRequest was null or undefined when calling createUser.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/register`,
            ApiCreateUserRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'createUser')));
        }
        return handle;
    }


  /**
   * Get profile of a user. Must be an administrator by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getProfileForAdminByMap(
    map: GetProfileForAdmin.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseApiUser>;
  public getProfileForAdminByMap(
    map: GetProfileForAdmin.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseApiUser>>;
  public getProfileForAdminByMap(
    map: GetProfileForAdmin.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseApiUser>>;
  public getProfileForAdminByMap(
    map: GetProfileForAdmin.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getProfileForAdmin(
      map.id,
      observe,
      reportProgress
    );
  }


    /**
     * Get profile of a user. Must be an administrator
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProfileForAdmin(id: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseApiUser>;
    public getProfileForAdmin(id: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseApiUser>>;
    public getProfileForAdmin(id: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseApiUser>>;
    public getProfileForAdmin(id: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getProfileForAdmin.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseApiUser>(`${this.configuration.basePath}/api/user/admin/profile/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getProfileForAdmin')));
        }
        return handle;
    }


  /**
   * Get profile of the currently loged-in user by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getProfileForUserByMap(
    map: GetProfileForUser.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseApiUserGet>;
  public getProfileForUserByMap(
    map: GetProfileForUser.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseApiUserGet>>;
  public getProfileForUserByMap(
    map: GetProfileForUser.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseApiUserGet>>;
  public getProfileForUserByMap(
    map: GetProfileForUser.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getProfileForUser(
      observe,
      reportProgress
    );
  }


    /**
     * Get profile of the currently loged-in user
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProfileForUser(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseApiUserGet>;
    public getProfileForUser(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseApiUserGet>>;
    public getProfileForUser(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseApiUserGet>>;
    public getProfileForUser(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseApiUserGet>(`${this.configuration.basePath}/api/user/profile`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getProfileForUser')));
        }
        return handle;
    }


  /**
   * Lists all users in the logged-in user&#39;s companies by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listUsersByMap(
    map: ListUsers.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiPaginatedResponseApiUserBase>;
  public listUsersByMap(
    map: ListUsers.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiPaginatedResponseApiUserBase>>;
  public listUsersByMap(
    map: ListUsers.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiPaginatedResponseApiUserBase>>;
  public listUsersByMap(
    map: ListUsers.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listUsers(
      map.status,
      map.role,
      map.email,
      map.surname,
      map.query,
      map.requestType,
      map.limit,
      map.offset,
      map.sortBy,
      map.sort,
      observe,
      reportProgress
    );
  }


    /**
     * Lists all users in the logged-in user&#39;s companies
     * 
     * @param status Status
     * @param role User role
     * @param email Email
     * @param surname Surname
     * @param query Name, surname or email
     * @param requestType Only count, only fetch, or return both values (if null)
     * @param limit Number of records to return. Min: 1, default: 100
     * @param offset Number of records to skip before returning. Default: 0, min: 0
     * @param sortBy Column name to be sorted by, varies for each endpoint, default is id
     * @param sort Direction of sorting (ASC or DESC). Default DESC.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listUsers(status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN' | 'REGIONAL_ADMIN', email?: string, surname?: string, query?: string, requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiPaginatedResponseApiUserBase>;
    public listUsers(status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN' | 'REGIONAL_ADMIN', email?: string, surname?: string, query?: string, requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiPaginatedResponseApiUserBase>>;
    public listUsers(status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN' | 'REGIONAL_ADMIN', email?: string, surname?: string, query?: string, requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiPaginatedResponseApiUserBase>>;
    public listUsers(status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN' | 'REGIONAL_ADMIN', email?: string, surname?: string, query?: string, requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', <any>role);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (surname !== undefined && surname !== null) {
            queryParameters = queryParameters.set('surname', <any>surname);
        }
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }
        if (requestType !== undefined && requestType !== null) {
            queryParameters = queryParameters.set('requestType', <any>requestType);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiPaginatedResponseApiUserBase>(`${this.configuration.basePath}/api/user/list`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'listUsers')));
        }
        return handle;
    }


  /**
   * Logs in a user by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public loginByMap(
    map: Login.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public loginByMap(
    map: Login.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public loginByMap(
    map: Login.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public loginByMap(
    map: Login.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.login(
      map.ApiLoginRequest,
      observe,
      reportProgress
    );
  }


    /**
     * Logs in a user
     * 
     * @param ApiLoginRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public login(ApiLoginRequest: ApiLoginRequest, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public login(ApiLoginRequest: ApiLoginRequest, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public login(ApiLoginRequest: ApiLoginRequest, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public login(ApiLoginRequest: ApiLoginRequest, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ApiLoginRequest === null || ApiLoginRequest === undefined) {
            throw new Error('Required parameter ApiLoginRequest was null or undefined when calling login.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/login`,
            ApiLoginRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'login')));
        }
        return handle;
    }


  /**
   * Logs out a user by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public logoutByMap(
    map: Logout.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public logoutByMap(
    map: Logout.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public logoutByMap(
    map: Logout.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public logoutByMap(
    map: Logout.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.logout(
      observe,
      reportProgress
    );
  }


    /**
     * Logs out a user
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public logout(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public logout(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public logout(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public logout(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/logout`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'logout')));
        }
        return handle;
    }


  /**
   * Refresh access token by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public refreshAuthenticationByMap(
    map: RefreshAuthentication.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public refreshAuthenticationByMap(
    map: RefreshAuthentication.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public refreshAuthenticationByMap(
    map: RefreshAuthentication.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public refreshAuthenticationByMap(
    map: RefreshAuthentication.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.refreshAuthentication(
      observe,
      reportProgress
    );
  }


    /**
     * Refresh access token
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public refreshAuthentication(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public refreshAuthentication(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public refreshAuthentication(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public refreshAuthentication(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/refresh_authentication`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'refreshAuthentication')));
        }
        return handle;
    }


  /**
   * Lists all available users for the requesting Regional admin. It also contains all users that are not yet part of any company. by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public regionalAdminListUsersByMap(
    map: RegionalAdminListUsers.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiPaginatedResponseApiUserBase>;
  public regionalAdminListUsersByMap(
    map: RegionalAdminListUsers.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiPaginatedResponseApiUserBase>>;
  public regionalAdminListUsersByMap(
    map: RegionalAdminListUsers.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiPaginatedResponseApiUserBase>>;
  public regionalAdminListUsersByMap(
    map: RegionalAdminListUsers.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.regionalAdminListUsers(
      map.status,
      map.role,
      map.email,
      map.surname,
      map.query,
      map.requestType,
      map.limit,
      map.offset,
      map.sortBy,
      map.sort,
      observe,
      reportProgress
    );
  }


    /**
     * Lists all available users for the requesting Regional admin. It also contains all users that are not yet part of any company.
     * 
     * @param status Status
     * @param role User role
     * @param email Email
     * @param surname Surname
     * @param query Name, surname or email
     * @param requestType Only count, only fetch, or return both values (if null)
     * @param limit Number of records to return. Min: 1, default: 100
     * @param offset Number of records to skip before returning. Default: 0, min: 0
     * @param sortBy Column name to be sorted by, varies for each endpoint, default is id
     * @param sort Direction of sorting (ASC or DESC). Default DESC.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regionalAdminListUsers(status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN' | 'REGIONAL_ADMIN', email?: string, surname?: string, query?: string, requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiPaginatedResponseApiUserBase>;
    public regionalAdminListUsers(status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN' | 'REGIONAL_ADMIN', email?: string, surname?: string, query?: string, requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiPaginatedResponseApiUserBase>>;
    public regionalAdminListUsers(status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN' | 'REGIONAL_ADMIN', email?: string, surname?: string, query?: string, requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiPaginatedResponseApiUserBase>>;
    public regionalAdminListUsers(status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN' | 'REGIONAL_ADMIN', email?: string, surname?: string, query?: string, requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', <any>role);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (surname !== undefined && surname !== null) {
            queryParameters = queryParameters.set('surname', <any>surname);
        }
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }
        if (requestType !== undefined && requestType !== null) {
            queryParameters = queryParameters.set('requestType', <any>requestType);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiPaginatedResponseApiUserBase>(`${this.configuration.basePath}/api/user/regional-admin/list`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'regionalAdminListUsers')));
        }
        return handle;
    }


  /**
   * Request reset password (sends mail with reset link) by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public requestResetPasswordByMap(
    map: RequestResetPassword.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public requestResetPasswordByMap(
    map: RequestResetPassword.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public requestResetPasswordByMap(
    map: RequestResetPassword.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public requestResetPasswordByMap(
    map: RequestResetPassword.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.requestResetPassword(
      map.ApiEmail,
      observe,
      reportProgress
    );
  }


    /**
     * Request reset password (sends mail with reset link)
     * 
     * @param ApiEmail 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public requestResetPassword(ApiEmail: ApiEmail, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public requestResetPassword(ApiEmail: ApiEmail, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public requestResetPassword(ApiEmail: ApiEmail, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public requestResetPassword(ApiEmail: ApiEmail, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ApiEmail === null || ApiEmail === undefined) {
            throw new Error('Required parameter ApiEmail was null or undefined when calling requestResetPassword.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/request_reset_password`,
            ApiEmail,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'requestResetPassword')));
        }
        return handle;
    }


  /**
   * Reset password using token and new password by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public resetPasswordByMap(
    map: ResetPassword.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public resetPasswordByMap(
    map: ResetPassword.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public resetPasswordByMap(
    map: ResetPassword.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public resetPasswordByMap(
    map: ResetPassword.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.resetPassword(
      map.ApiResetPasswordRequest,
      observe,
      reportProgress
    );
  }


    /**
     * Reset password using token and new password
     * 
     * @param ApiResetPasswordRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetPassword(ApiResetPasswordRequest: ApiResetPasswordRequest, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public resetPassword(ApiResetPasswordRequest: ApiResetPasswordRequest, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public resetPassword(ApiResetPasswordRequest: ApiResetPasswordRequest, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public resetPassword(ApiResetPasswordRequest: ApiResetPasswordRequest, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ApiResetPasswordRequest === null || ApiResetPasswordRequest === undefined) {
            throw new Error('Required parameter ApiResetPasswordRequest was null or undefined when calling resetPassword.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/reset_password`,
            ApiResetPasswordRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'resetPassword')));
        }
        return handle;
    }


  /**
   * Update profile of the currently logged in user by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateProfileByMap(
    map: UpdateProfile.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public updateProfileByMap(
    map: UpdateProfile.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public updateProfileByMap(
    map: UpdateProfile.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public updateProfileByMap(
    map: UpdateProfile.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.updateProfile(
      map.ApiUserUpdate,
      observe,
      reportProgress
    );
  }


    /**
     * Update profile of the currently logged in user
     * 
     * @param ApiUserUpdate 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProfile(ApiUserUpdate: ApiUserUpdate, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public updateProfile(ApiUserUpdate: ApiUserUpdate, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public updateProfile(ApiUserUpdate: ApiUserUpdate, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public updateProfile(ApiUserUpdate: ApiUserUpdate, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ApiUserUpdate === null || ApiUserUpdate === undefined) {
            throw new Error('Required parameter ApiUserUpdate was null or undefined when calling updateProfile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.put<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/profile`,
            ApiUserUpdate,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'updateProfile')));
        }
        return handle;
    }

}
